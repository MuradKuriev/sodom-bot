import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice, PreCheckoutQuery
import os
from getpass import getpass
import pymysql
from datetime import datetime

from pyexpat.errors import messages
from transliterate import translit

from transliterate import translit
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


TELEGRAM_TOKEN = ''
PAYMENTS_TOKEN = ''
# 1395243934 - admin
ADMIN_ID = 5408719356 #2
DATABASE_URL = "mkuriecw.beget.tech"
DATABASE_USER = "mkuriecw_bot"
DATABASE_PASSWORD = "3SVSJZBx&dNZ"
DATABASE_NAME = "mkuriecw_bot"

def check_payment_token():
    if not PAYMENTS_TOKEN:
        logger.error("PAYMENTS_TOKEN is not set")
        return False
    
    if PAYMENTS_TOKEN.startswith('TEST'):
        logger.info("Using TEST payment token")
    elif PAYMENTS_TOKEN.startswith(':'):
        logger.info("Using live payment token")
    else:
        logger.error(f"Invalid payment token format: {PAYMENTS_TOKEN}")
        return False
    
    return True

def connect_db():
    try:
        connection = pymysql.connect(
            host=DATABASE_URL,
            port=3306,
            user=DATABASE_USER,
            password=DATABASE_PASSWORD,
            database=DATABASE_NAME
        )
        return connection
    except Exception as e:
        logger.error(f"Database connection error: {e}")
        return None


def conn():
    try:
        connection = pymysql.connect(
            host=DATABASE_URL,
            port=3306,
            user=DATABASE_USER,
            password=DATABASE_PASSWORD,
            database=DATABASE_NAME
        )
        conn = connection.cursor()
        conn.execute(
            "CREATE TABLE IF NOT EXISTS users (id int auto_increment primary key, name varchar(60), phone varchar(16), id_telegram int unique)")
        conn.execute(
            "CREATE TABLE IF NOT EXISTS categories (id int auto_increment primary key, name varchar(60), code varchar(60))")

        # Check if categories exist, if not, add them
        conn.execute("SELECT COUNT(*) FROM categories")
        count = conn.fetchone()[0]
        if count == 0:
            for category in Categories:
                code_url = translit(category, 'ru', reversed=True).lower().replace(' ', '_')
                conn.execute("INSERT INTO categories (name, code) VALUES (%s, %s)", (category, code_url))
            connection.commit()

        conn.execute("CREATE TABLE IF NOT EXISTS products (id int auto_increment primary key, "
                     "name varchar(60), img varchar(255), category_id int, price decimal(10,2), foreign key (category_id) references categories(id))")
        conn.execute(
            "CREATE TABLE IF NOT EXISTS order_items (id int auto_increment primary key, product_id int, quantity int, total decimal(10,2)," \
            "foreign key(product_id) references products(id))")
        conn.execute(
            "CREATE TABLE IF NOT EXISTS orders (id int auto_increment primary key, user_id int, items_id int, create_data datetime null, status varchar(20), address varchar(255), comment text, summa decimal(10,2)," \
            "foreign key (user_id) references users(id), foreign key(items_id) references order_items(id))")

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        conn.execute(
            "CREATE TABLE IF NOT EXISTS cart (id int auto_increment primary key, user_id int, product_id int, quantity int, " \
            "foreign key (user_id) references users(id), foreign key (product_id) references products(id))")

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∑–∞—è–≤–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        conn.execute(
            "CREATE TABLE IF NOT EXISTS feedback (id int auto_increment primary key, user_id int, message text, status varchar(20), created_at datetime, " \
            "foreign key (user_id) references users(id))")

        conn.close()
        connection.close()
    except Exception as e:
        logger.error(f"Database initialization error: {e}")


Categories = [
    '–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã',
    '–û—Ç–¥–µ–ª–æ—á–Ω—ã–µ',
    '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ',
    '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã'
]

bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
class ProductStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_category = State()
    waiting_for_price = State()
    waiting_for_image = State()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
class EditProductStates(StatesGroup):
    waiting_for_product_id = State()
    waiting_for_field = State()
    waiting_for_new_value = State()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
class OrderStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_address = State()
    waiting_for_comment = State()
    confirmation = State()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
class FeedbackStates(StatesGroup):
    waiting_for_message = State()


class ToolStates(StatesGroup):
    adding_name = State()
    adding_price = State()
    deleting = State()


async def main_menu():
    builder = ReplyKeyboardBuilder()
    buttons = [
        "üó®Ô∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
        "üëâ –ö–∞—Ç–∞–ª–æ–≥",
        "üß∫ –ö–æ—Ä–∑–∏–Ω–∞",
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å"
    ]
    for button in buttons:
        builder.add(types.KeyboardButton(text=button))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


async def admin_menu():
    builder = ReplyKeyboardBuilder()
    buttons = [
        "üó®Ô∏è –ó–∞—è–≤–∫–∏",
        "üëâ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä",
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä",
        "üß∫ –ó–∞–∫–∞–∑—ã",
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    ]
    for button in buttons:
        builder.add(types.KeyboardButton(text=button))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


async def cancel_button():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    return builder.as_markup(resize_keyboard=True)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def register_user(user_id, username):
    connection = connect_db()
    if not connection:
        return None

    cursor = connection.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute("SELECT id FROM users WHERE id_telegram = %s", (user_id,))
        user = cursor.fetchone()

        if not user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            cursor.execute("INSERT INTO users (name, id_telegram) VALUES (%s, %s)", (username, user_id))
            connection.commit()
            user_db_id = cursor.lastrowid
        else:
            user_db_id = user[0]

        return user_db_id
    except Exception as e:
        logger.error(f"Error registering user: {e}")
        return None
    finally:
        cursor.close()
        connection.close()


# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def get_user_db_id(user_id):
    connection = connect_db()
    if not connection:
        return None

    cursor = connection.cursor()

    try:
        cursor.execute("SELECT id FROM users WHERE id_telegram = %s", (user_id,))
        user = cursor.fetchone()

        if user:
            return user[0]
        return None
    except Exception as e:
        logger.error(f"Error getting user ID: {e}")
        return None
    finally:
        cursor.close()
        connection.close()


# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    return user_id == ADMIN_ID


@dp.message(lambda message: message.text == "üëâ –ö–∞—Ç–∞–ª–æ–≥")
async def catalogs(message: types.Message):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω

    await register_user(message.from_user.id, message.from_user.first_name)

    markup = ReplyKeyboardBuilder()
    for category in Categories:
        markup.row(types.KeyboardButton(text=category))
    markup.row(types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤', reply_markup=markup.as_markup(resize_keyboard=True))


@dp.message(lambda message: message.text in Categories)
async def category_products(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
    current_state = await state.get_state()
    if current_state == "ProductStates:waiting_for_category":
        # –ï—Å–ª–∏ –¥–∞, —Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        await process_product_category(message, state)
        return

    # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_name = message.text

    connection = connect_db()
    if not connection:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=await main_menu())
        return

    cursor = connection.cursor()

    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        cursor.execute("SELECT id FROM categories WHERE name = %s", (category_name,))
        category = cursor.fetchone()

        if not category:
            # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
            code_url = translit(category_name, 'ru', reversed=True).lower().replace(' ', '_')
            cursor.execute("INSERT INTO categories (name, code) VALUES (%s, %s)", (category_name, code_url))
            connection.commit()
            category_id = cursor.lastrowid
        else:
            category_id = category[0]

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        cursor.execute("SELECT id, name, price FROM products WHERE category_id = %s", (category_id,))
        products = cursor.fetchall()

        if not products:
            await message.answer(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", reply_markup=await main_menu())
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        markup = ReplyKeyboardBuilder()
        for product in products:
            markup.row(types.KeyboardButton(text=f"{product[1]} - {product[2]} —Ä—É–±."))
            # markup.row(types.KeyboardButton(text=f"–¢–æ–≤–∞—Ä: {product[1]} - {product[2]} —Ä—É–±."))
        markup.row(types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))

        await message.answer(f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':",
                             reply_markup=markup.as_markup(resize_keyboard=True))
    except Exception as e:
        logger.error(f"Error showing category products: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                             reply_markup=await main_menu())
    finally:
        cursor.close()
        connection.close()


# @dp.message(lambda message: " - " in message.text and "—Ä—É–±." in message.text)

@dp.message(lambda m: m.text and " - " in m.text and "—Ä—É–±." in m.text and m.text.count(" - ") == 1)
async def product_selected(message: types.Message):
    product_info = message.text.split(" - ")[0]

    connection = connect_db()
    if not connection:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=await main_menu())
        return

    cursor = connection.cursor()

    try:
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        cursor.execute("SELECT id, name, price, img, category_id FROM products WHERE name = %s", (product_info,))
        product = cursor.fetchone()

        if not product:
            await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=await main_menu())
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        cursor.execute("SELECT name FROM categories WHERE id = %s", (product[4],))
        category = cursor.fetchone()

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        inline_markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="1", callback_data=f"add_to_cart:{product[0]}:1"),
                    types.InlineKeyboardButton(text="2", callback_data=f"add_to_cart:{product[0]}:2"),
                    types.InlineKeyboardButton(text="3", callback_data=f"add_to_cart:{product[0]}:3"),
                    types.InlineKeyboardButton(text="5", callback_data=f"add_to_cart:{product[0]}:5"),
                ]
            ]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        product_text = f"üì¶ <b>{product[1]}</b>\n\n"
        product_text += f"üí∞ –¶–µ–Ω–∞: {product[2]} —Ä—É–±.\n"
        product_text += f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category[0]}\n"
        if product[3] != '':
            photo = FSInputFile(product[3])
            await message.answer_photo(photo=photo, caption=product_text, parse_mode="HTML", reply_markup=inline_markup)
        else:
            await message.answer(product_text, parse_mode="HTML", reply_markup=inline_markup)
    except Exception as e:
        logger.error(f"Error showing product: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                             reply_markup=await main_menu())
    finally:
        cursor.close()
        connection.close()


@dp.callback_query(lambda c: c.data.startswith("add_to_cart:"))
async def add_to_cart(callback_query: types.CallbackQuery):
    # --- –ù–û–í–û–ï: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å try/except
    try:
        user_id = await get_user_db_id(callback_query.from_user.id)
        if not user_id:
            user_id = await register_user(
                callback_query.from_user.id,
                callback_query.from_user.first_name
            )
            if not user_id:
                raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await callback_query.answer(
            f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /start –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        )
        return

        cursor = connection.cursor()

        cursor.execute("SELECT id, quantity FROM cart WHERE user_id = %s AND product_id = %s", (user_id, product_id))
        cart_item = cursor.fetchone()

        if cart_item:
            new_quantity = cart_item[1] + quantity
            cursor.execute("UPDATE cart SET quantity = %s WHERE id = %s", (new_quantity, cart_item[0]))
        else:
            cursor.execute("INSERT INTO cart (user_id, product_id, quantity) VALUES (%s, %s, %s)",
                           (user_id, product_id, quantity))

        connection.commit()

        cursor.execute("SELECT name FROM products WHERE id = %s", (product_id,))
        product_name = cursor.fetchone()[0]

        await callback_query.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {quantity} —à—Ç. '{product_name}' –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    except Exception as e:
        logger.error(f"Error adding to cart: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")
    finally:
        if 'cursor' in locals(): cursor.close()
        if 'connection' in locals(): connection.close()


@dp.message(lambda m: m.text == "üß∫ –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    try:
        user_id = await get_user_db_id(message.from_user.id)
        if not user_id:
            user_id = await register_user(
                message.from_user.id,
                message.from_user.first_name
            )
            if not user_id:
                raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await message.answer(
            f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /start –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        )
        return

    connection = connect_db()
    if not connection:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=await main_menu())
        return

    cursor = connection.cursor()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
        cursor.execute("""
            SELECT c.id, p.name, p.price, c.quantity, (p.price * c.quantity) as total
            FROM cart c
            JOIN products p ON c.product_id = p.id
            WHERE c.user_id = %s
        """, (user_id,))

        cart_items = cursor.fetchall()

        if not cart_items:
            await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=await main_menu())
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∫–æ—Ä–∑–∏–Ω—ã
        cart_text = "üß∫ <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
        total_sum = 0

        for item in cart_items:
            cart_text += f"‚Ä¢ {item[1]} - {item[2]} —Ä—É–±. x {item[3]} = {item[4]} —Ä—É–±.\n"
            total_sum += item[4]

        cart_text += f"\n<b>–ò—Ç–æ–≥–æ: {total_sum} —Ä—É–±.</b>"

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
        inline_markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"),
                    types.InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")
                ]
            ]
        )

        await message.answer(cart_text, parse_mode="HTML", reply_markup=inline_markup)
    except Exception as e:
        logger.error(f"Error showing cart: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                             reply_markup=await main_menu())
    finally:
        cursor.close()
        connection.close()


@dp.callback_query(lambda c: c.data == "clear_cart")
async def clear_cart(callback_query: types.CallbackQuery):
    user_id = await get_user_db_id(callback_query.from_user.id)

    if not user_id:
        await callback_query.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    connection = connect_db()
    if not connection:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    cursor = connection.cursor()

    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("DELETE FROM cart WHERE user_id = %s", (user_id,))
        connection.commit()

        await callback_query.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
        await callback_query.message.edit_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=None)
    except Exception as e:
        logger.error(f"Error clearing cart: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã.")
    finally:
        cursor.close()
        connection.close()


@dp.callback_query(lambda c: c.data == "checkout")
async def start_checkout(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        user_id = await get_user_db_id(callback_query.from_user.id)
        if not user_id:
            user_id = await register_user(
                callback_query.from_user.id,
                callback_query.from_user.first_name
            )
            if not user_id:
                raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await callback_query.answer(
            f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /start –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        )
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(user_db_id=user_id)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback_query.message.answer(
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:",
        reply_markup=await cancel_button()
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
    await state.set_state(OrderStates.waiting_for_name)


@dp.message(OrderStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=await main_menu())
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(name=message.text)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:",
        reply_markup=await cancel_button()
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.set_state(OrderStates.waiting_for_phone)


@dp.message(OrderStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=await main_menu())
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(phone=message.text)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=await cancel_button()
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
    await state.set_state(OrderStates.waiting_for_address)


@dp.message(OrderStates.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=await main_menu())
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(address=message.text)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É
    await message.answer(
        "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):",
        reply_markup=await cancel_button()
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    await state.set_state(OrderStates.waiting_for_comment)


@dp.message(OrderStates.waiting_for_comment)
async def process_comment(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=await main_menu())
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    comment = message.text if message.text.lower() != "–Ω–µ—Ç" else ""
    await state.update_data(comment=comment)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    user_db_id = data["user_db_id"]

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    connection = connect_db()
    if not connection:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=await main_menu())
        await state.clear()
        return

    cursor = connection.cursor()

    try:
        cursor.execute("""
            SELECT p.name, p.price, c.quantity, (p.price * c.quantity) as total
            FROM cart c
            JOIN products p ON c.product_id = p.id
            WHERE c.user_id = %s
        """, (user_db_id,))

        cart_items = cursor.fetchall()

        if not cart_items:
            await state.clear()
            await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ó–∞–∫–∞–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω.", reply_markup=await main_menu())
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        confirmation_text = "üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:</b>\n\n"
        confirmation_text += f"üë§ –ò–º—è: {data['name']}\n"
        confirmation_text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        confirmation_text += f"üè† –ê–¥—Ä–µ—Å: {data['address']}\n"

        if data['comment']:
            confirmation_text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}\n"

        confirmation_text += "\n<b>–¢–æ–≤–∞—Ä—ã:</b>\n"
        total_sum = 0

        for item in cart_items:
            confirmation_text += f"‚Ä¢ {item[0]} - {item[1]} —Ä—É–±. x {item[2]} = {item[3]} —Ä—É–±.\n"
            total_sum += item[3]

        confirmation_text += f"\n<b>–ò—Ç–æ–≥–æ: {total_sum} —Ä—É–±.</b>"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(total_sum=total_sum)

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        inline_markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order"),
                    types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")
                ]
            ]
        )

        await message.answer(confirmation_text, parse_mode="HTML", reply_markup=inline_markup)
        await state.set_state(OrderStates.confirmation)
    except Exception as e:
        logger.error(f"Error processing order comment: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                             reply_markup=await main_menu())
        await state.clear()
    finally:
        cursor.close()
        connection.close()


async def save_order_to_db(data, user_db_id, status="–ù–æ–≤—ã–π"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info(f"Saving order to database for user_db_id: {user_db_id}, status: {status}")
    
    connection = connect_db()
    if not connection:
        logger.error("Database connection failed")
        return False
        
    cursor = connection.cursor()
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        cursor.execute(
            "UPDATE users SET name = %s, phone = %s WHERE id = %s",
            (data['name'], data['phone'], user_db_id)
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        cursor.execute("""
            SELECT c.product_id, p.price, c.quantity, (p.price * c.quantity) as total
            FROM cart c
            JOIN products p ON c.product_id = p.id
            WHERE c.user_id = %s
        """, (user_db_id,))
        
        cart_items = cursor.fetchall()
        
        if not cart_items:
            logger.warning(f"No items in cart for user_db_id: {user_db_id}")
            return False
            
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑–µ
        order_items_ids = []
        for item in cart_items:
            cursor.execute(
                "INSERT INTO order_items (product_id, quantity, total) VALUES (%s, %s, %s)",
                (item[0], item[2], item[3])
            )
            order_items_ids.append(cursor.lastrowid)
            
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        for item_id in order_items_ids:
            cursor.execute(
                "INSERT INTO orders (user_id, items_id, create_data, status, address, comment, summa) VALUES (%s, %s, %s, %s, %s, %s, %s)",
                (user_db_id, item_id, datetime.now(), status, data['address'], data['comment'], data['total_sum'])
            )
            
        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("DELETE FROM cart WHERE user_id = %s", (user_db_id,))
        
        connection.commit()
        logger.info(f"Order successfully saved for user_db_id: {user_db_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_notification = f"üîî <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n"
        admin_notification += f"üë§ –ò–º—è: {data['name']}\n"
        admin_notification += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        admin_notification += f"üè† –ê–¥—Ä–µ—Å: {data['address']}\n"
        
        if data['comment']:
            admin_notification += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}\n"
            
        admin_notification += f"\n<b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {data['total_sum']} —Ä—É–±.</b>"
        admin_notification += f"\n<b>–°—Ç–∞—Ç—É—Å: {status}</b>"
        
        asyncio.create_task(bot.send_message(ADMIN_ID, admin_notification, parse_mode="HTML"))
        
        return True
        
    except Exception as e:
        import traceback
        logger.error(f"Error saving order to database: {e}")
        logger.error(traceback.format_exc())
        
        try:
            connection.rollback()
        except:
            pass
            
        return False
        
    finally:
        cursor.close()
        connection.close()

@dp.callback_query(F.data == "confirm_order")
async def confirm_order(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        logger.info(f"Confirm order callback received from user {callback_query.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await state.get_state()
        logger.info(f"Current state: {current_state}")
        
        if current_state != "OrderStates:confirmation":
            logger.warning(f"Unexpected state for confirm_order: {current_state}")
            await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞.")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        logger.info(f"State data: {data}")
        
        user_db_id = data.get("user_db_id")
        if not user_db_id:
            logger.error("user_db_id not found in state data")
            await callback_query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
            
        total_sum = data.get('total_sum')
        if not total_sum:
            logger.error("total_sum not found in state data")
            await callback_query.answer("–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
            
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É–º–º—É –≤ –∫–æ–ø–µ–π–∫–∏ –¥–ª—è API Telegram
        total_sum_kopecks = int(total_sum * 100)
        logger.info(f"Total sum in kopecks: {total_sum_kopecks}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ø–ª–∞—Ç–µ–∂–∏
        if not payment_enabled:
            logger.error("Payments are disabled due to invalid token")
            await callback_query.message.answer(
                "–û–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –±–µ–∑ –æ–ø–ª–∞—Ç—ã.",
                reply_markup=await main_menu()
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –±–µ–∑ –æ–ø–ª–∞—Ç—ã
            await save_order_to_db(data, user_db_id, "–ù–æ–≤—ã–π (–±–µ–∑ –æ–ø–ª–∞—Ç—ã)")
            await state.clear()
            return
            
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
        order_id = f"order_{user_db_id}_{int(datetime.now().timestamp())}"
        logger.info(f"Generated order_id: {order_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(order_id=order_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å—á–µ—Ç–∞
        title = '–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –≤ Telegram-–º–∞–≥–∞–∑–∏–Ω–µ ¬´–°–æ–¥–æ–º–õ–µ—Å –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç¬ª'
        description = f'–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å—É–º–º—É {total_sum} —Ä—É–±.'
        
        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã
        prices = [LabeledPrice(label="–¢–æ–≤–∞—Ä—ã", amount=total_sum_kopecks)]
        
        logger.info(f"Sending invoice to user {callback_query.from_user.id}")
        await bot.send_invoice(
            chat_id=callback_query.from_user.id, 
            title=title,
            description=description, 
            payload=order_id,
            provider_token=PAYMENTS_TOKEN,
            currency='RUB',
            prices=prices,
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            is_flexible=False
        )
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback_query.answer()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã
        await callback_query.message.answer(
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –≤—ã—à–µ.",
            reply_markup=await main_menu()
        )
        
    except Exception as e:
        import traceback
        logger.error(f"Error in confirm_order: {e}")
        logger.error(traceback.format_exc())
        
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        await callback_query.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=await main_menu()
        )
        await state.clear()
        
@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery, state: FSMContext):
    try:
        logger.info(f"Pre-checkout query received: {pre_checkout_query.id}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ç.–¥.
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        
        logger.info(f"Approving pre-checkout query: {pre_checkout_query.id}")
        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
        
    except Exception as e:
        import traceback
        logger.error(f"Error in pre_checkout_query: {e}")
        logger.error(traceback.format_exc())
        
        try:
            await bot.answer_pre_checkout_query(
                pre_checkout_query.id,
                ok=False,
                error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception as e2:
            logger.error(f"Error answering pre_checkout_query: {e2}")

@dp.message(F.successful_payment)
async def process_successful_payment(message: types.Message, state: FSMContext):
    try:
        payment_info = message.successful_payment
        logger.info(f"Successful payment received: {payment_info.telegram_payment_charge_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        logger.info(f"State data for successful payment: {data}")
        
        user_db_id = data.get("user_db_id")
        if not user_db_id:
            logger.error("user_db_id not found in state data")
            await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=await main_menu())
            await state.clear()
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        order_saved = await save_order_to_db(data, user_db_id, "–û–ø–ª–∞—á–µ–Ω")
        
        if order_saved:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(
                f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É {payment_info.total_amount / 100} {payment_info.currency} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!\n"
                f"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.",
                reply_markup=await main_menu()
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑
            await message.answer(
                f"‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {payment_info.total_amount / 100} {payment_info.currency} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!\n"
                f"–û–¥–Ω–∞–∫–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=await main_menu()
            )
            
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        import traceback
        logger.error(f"Error in successful_payment handler: {e}")
        logger.error(traceback.format_exc())
        
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=await main_menu()
        )
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@dp.message(F.successful_payment)
async def process_successful_payment(message: types.Message, state: FSMContext):
    try:
        payment_info = message.successful_payment
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        if not data.get("order_pending"):
            await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=await main_menu())
            await state.clear()
            return
            
        user_db_id = data["user_db_id"]
        
        connection = connect_db()
        if not connection:
            await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                reply_markup=await main_menu())
            await state.clear()
            return
            
        cursor = connection.cursor()
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            cursor.execute(
                "UPDATE users SET name = %s, phone = %s WHERE id = %s",
                (data['name'], data['phone'], user_db_id)
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            cursor.execute("""
                SELECT c.product_id, p.price, c.quantity, (p.price * c.quantity) as total
                FROM cart c
                JOIN products p ON c.product_id = p.id
                WHERE c.user_id = %s
            """, (user_db_id,))
            
            cart_items = cursor.fetchall()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑–µ
            order_items_ids = []
            for item in cart_items:
                cursor.execute(
                    "INSERT INTO order_items (product_id, quantity, total) VALUES (%s, %s, %s)",
                    (item[0], item[2], item[3])
                )
                order_items_ids.append(cursor.lastrowid)
                
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            for item_id in order_items_ids:
                cursor.execute(
                    "INSERT INTO orders (user_id, items_id, create_data, status, address, comment, summa) VALUES (%s, %s, %s, %s, %s, %s, %s)",
                    (user_db_id, item_id, datetime.now(), "–û–ø–ª–∞—á–µ–Ω", data['address'], data['comment'], data['total_sum'])
                )
                
            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("DELETE FROM cart WHERE user_id = %s", (user_db_id,))
            
            connection.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            admin_notification = f"üîî <b>–ù–æ–≤—ã–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑!</b>\n\n"
            admin_notification += f"üë§ –ò–º—è: {data['name']}\n"
            admin_notification += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            admin_notification += f"üè† –ê–¥—Ä–µ—Å: {data['address']}\n"
            
            if data['comment']:
                admin_notification += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}\n"
                
            admin_notification += f"\n<b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {data['total_sum']} —Ä—É–±.</b>"
            admin_notification += f"\n<b>‚úÖ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω!</b>"
            
            await bot.send_message(ADMIN_ID, admin_notification, parse_mode="HTML")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(
                f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É {payment_info.total_amount / 100} {payment_info.currency} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!\n"
                f"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.",
                reply_markup=await main_menu()
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
        except Exception as e:
            import traceback
            logger.error(f"Error processing payment: {e}")
            logger.error(traceback.format_exc())
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                                reply_markup=await main_menu())
            await state.clear()
        finally:
            cursor.close()
            connection.close()
            
    except Exception as e:
        logger.error(f"Error in successful_payment handler: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                            reply_markup=await main_menu())
        await state.clear()


@dp.callback_query(F.data == "cancel_order")
async def cancel_order(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        logger.info(f"Cancel order callback received from user {callback_query.from_user.id}")
        
        await state.clear()
        await callback_query.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
        await callback_query.message.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=await main_menu())
        
    except Exception as e:
        logger.error(f"Error in cancel_order: {e}")
        
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞.", reply_markup=await main_menu())
        await state.clear()


@dp.message(lambda message: message.text == "üó®Ô∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def feedback_start(message: types.Message, state: FSMContext):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å:",
        reply_markup=await cancel_button()
    )
    await state.set_state(FeedbackStates.waiting_for_message)


@dp.message(FeedbackStates.waiting_for_message)
async def process_feedback(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=await main_menu())
        return

    user_id = await get_user_db_id(message.from_user.id)
    if not user_id:
        user_id = await register_user(message.from_user.id, message.from_user.first_name)
        if not user_id:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=await main_menu())
            await state.clear()
            return

    connection = connect_db()
    if not connection:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=await main_menu())
        await state.clear()
        return

    cursor = connection.cursor()

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute(
            "INSERT INTO feedback (user_id, message, status, created_at) VALUES (%s, %s, %s, %s)",
            (user_id, message.text, "–ù–æ–≤–æ–µ", datetime.now())
        )
        connection.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_notification = f"üì© <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n\n"
        admin_notification += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.first_name} (@{message.from_user.username if message.from_user.username else '–±–µ–∑ username'})\n"
        admin_notification += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}\n"

        await bot.send_message(ADMIN_ID, admin_notification, parse_mode="HTML")

        await state.clear()
        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                             reply_markup=await main_menu())
    except Exception as e:
        logger.error(f"Error saving feedback: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                             reply_markup=await main_menu())
        await state.clear()
    finally:
        cursor.close()
        connection.close()


# –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

@dp.message(lambda message: message.text == "üëâ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä" and message.from_user.id == ADMIN_ID)
async def add_product_start(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        logger.info(f"Clearing previous state: {current_state}")

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=await cancel_button()
    )
    await state.set_state(ProductStates.waiting_for_name)
    logger.info(f"Set state to ProductStates.waiting_for_name for user {message.from_user.id}")


@dp.message(ProductStates.waiting_for_name)
async def process_product_name(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        logger.info(f"Product addition canceled by user {message.from_user.id}")
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=await admin_menu())
        return

    await state.update_data(name=message.text)
    logger.info(f"Product name saved: {message.text}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    markup = ReplyKeyboardBuilder()
    for category in Categories:
        markup.row(types.KeyboardButton(text=category))
    markup.row(types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=markup.as_markup(resize_keyboard=True)
    )
    await state.set_state(ProductStates.waiting_for_category)
    logger.info(f"Set state to ProductStates.waiting_for_category for user {message.from_user.id}")


@dp.message(ProductStates.waiting_for_category)
async def process_product_category(message: types.Message, state: FSMContext):
    logger.info(f"Processing category selection: {message.text}")

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        logger.info(f"Product addition canceled by user {message.from_user.id}")
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=await admin_menu())
        return

    if message.text not in Categories:
        logger.warning(f"Invalid category selected: {message.text}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    # Get or create category ID
    connection = connect_db()
    if not connection:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=await admin_menu())
        await state.clear()
        return

    cursor = connection.cursor()

    try:
        # Check if category exists
        cursor.execute("SELECT id FROM categories WHERE name = %s", (message.text,))
        category = cursor.fetchone()

        if not category:
            # If category doesn't exist, create it
            code_url = translit(message.text, 'ru', reversed=True).lower().replace(' ', '_')
            cursor.execute("INSERT INTO categories (name, code) VALUES (%s, %s)", (message.text, code_url))
            connection.commit()
            category_id = cursor.lastrowid
            logger.info(f"Created new category: {message.text} with ID {category_id}")
        else:
            category_id = category[0]
            logger.info(f"Using existing category: {message.text} with ID {category_id}")

        # Save category ID in state
        await state.update_data(category=message.text, category_id=category_id)

        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
            reply_markup=await cancel_button()
        )
        await state.set_state(ProductStates.waiting_for_price)
        logger.info(f"Set state to ProductStates.waiting_for_price for user {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error processing category: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}", reply_markup=await admin_menu())
        await state.clear()
    finally:
        cursor.close()
        connection.close()


@dp.message(ProductStates.waiting_for_price)
async def process_product_price(message: types.Message, state: FSMContext):
    logger.info(f"Processing price: {message.text}")

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        logger.info(f"Product addition canceled by user {message.from_user.id}")
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=await admin_menu())
        return

    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")

        await state.update_data(price=price)
        logger.info(f"Price saved: {price}")

        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç):",
            reply_markup=await cancel_button()
        )
        await state.set_state(ProductStates.waiting_for_image)
        logger.info(f"Set state to ProductStates.waiting_for_image for user {message.from_user.id}")
    except ValueError:
        logger.warning(f"Invalid price format: {message.text}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ).")


@dp.message(ProductStates.waiting_for_image)
async def process_product_image(message: types.Message, state: FSMContext):
    logger.info(f"Processing image input. Has photo: {bool(message.photo)}, Text: {message.text}")

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        logger.info(f"Product addition canceled by user {message.from_user.id}")
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=await admin_menu())
        return

    data = await state.get_data()
    img_path = ""
    photo = message.photo[-1]

    if photo:
        # If user sent a photo, save its file_id

        file_id = message.photo[-1].file_id
        #
        # img_path = f"images/{file_id}.jpg"
        # logger.info(f"Image path saved: {img_path}")

        file = await bot.get_file(photo.file_id)
        file_path = file.file_path

        photo_path = f'{photo.file_id}.jpg'  # —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ file_id –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        img_path = os.path.join('images', photo_path)

        await bot.download_file(file_path, destination=img_path)

    elif message.text and message.text.lower() != "–Ω–µ—Ç":
        logger.warning(f"Invalid image input: {message.text}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.")
        return

    connection = connect_db()
    if not connection:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=await admin_menu())
        await state.clear()
        return

    cursor = connection.cursor()

    try:
        # Get category_id from state
        category_id = data.get('category_id')

        if not category_id:
            # If category_id is not in state, get it from database
            cursor.execute("SELECT id FROM categories WHERE name = %s", (data['category'],))
            category = cursor.fetchone()

            if not category:
                # If category doesn't exist, create it
                code_url = translit(data['category'], 'ru', reversed=True).lower().replace(' ', '_')
                cursor.execute("INSERT INTO categories (name, code) VALUES (%s, %s)", (data['category'], code_url))
                connection.commit()
                category_id = cursor.lastrowid
                logger.info(f"Created new category: {data['category']} with ID {category_id}")
            else:
                category_id = category[0]
                logger.info(f"Using existing category: {data['category']} with ID {category_id}")

        # Add product with proper error handling
        cursor.execute(
            "INSERT INTO products (name, img, category_id, price) VALUES (%s, %s, %s, %s)",
            (data['name'], img_path, category_id, data['price'])
        )
        connection.commit()

        product_id = cursor.lastrowid
        logger.info(f"Product added successfully: ID={product_id}, Name={data['name']}, Category ID={category_id}")

        # Clear state before responding
        await state.clear()

        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä '{data['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{data['category']}'!",
            reply_markup=await admin_menu()
        )
    except Exception as e:
        logger.error(f"Error adding product: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}", reply_markup=await admin_menu())
        await state.clear()
    finally:
        cursor.close()
        connection.close()


@dp.message(lambda message: message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä" and message.from_user.id == ADMIN_ID)
async def edit_product_start(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()

    connection = connect_db()
    if not connection:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=await admin_menu())
        return

    cursor = connection.cursor()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
        cursor.execute("SELECT id, name, price FROM products ORDER BY name")
        products = cursor.fetchall()

        if not products:
            await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=await admin_menu())
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(products=products)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤
        products_text = "–í—ã–±–µ—Ä–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        for product in products:
            products_text += f"ID: {product[0]} - {product[1]} - {product[2]} —Ä—É–±.\n"

        await message.answer(
            products_text,
            reply_markup=await cancel_button()
        )
        await state.set_state(EditProductStates.waiting_for_product_id)
    except Exception as e:
        logger.error(f"Error listing products: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤.", reply_markup=await admin_menu())
    finally:
        cursor.close()
        connection.close()


@dp.message(EditProductStates.waiting_for_product_id)
async def process_product_id(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=await admin_menu())
        return

    try:
        product_id = int(message.text)

        connection = connect_db()
        if not connection:
            await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=await admin_menu())
            await state.clear()
            return

        cursor = connection.cursor()

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID
            cursor.execute("SELECT id, name, price, category_id FROM products WHERE id = %s", (product_id,))
            product = cursor.fetchone()

            if not product:
                await message.answer("–¢–æ–≤–∞—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(product_id=product_id, product_name=product[1])

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—è–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            markup = ReplyKeyboardBuilder()
            markup.row(types.KeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ"))
            markup.row(types.KeyboardButton(text="–¶–µ–Ω–∞"))
            markup.row(types.KeyboardButton(text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"))
            markup.row(types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))

            await message.answer(
                f"–í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: {product[1]} - {product[2]} —Ä—É–±.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=markup.as_markup(resize_keyboard=True)
            )
            await state.set_state(EditProductStates.waiting_for_field)
        except Exception as e:
            logger.error(f"Error getting product: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ.", reply_markup=await admin_menu())
            await state.clear()
        finally:
            cursor.close()
            connection.close()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ).")


@dp.message(EditProductStates.waiting_for_field)
async def process_field_selection(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=await admin_menu())
        return

    valid_fields = ["–ù–∞–∑–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]
    if message.text not in valid_fields:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(field=message.text.lower())

    if message.text == "–ö–∞—Ç–µ–≥–æ—Ä–∏—è":
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        markup = ReplyKeyboardBuilder()
        for category in Categories:
            markup.row(types.KeyboardButton(text=category))
        markup.row(types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=markup.as_markup(resize_keyboard=True)
        )
    else:
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{message.text}':",
            reply_markup=await cancel_button()
        )

    await state.set_state(EditProductStates.waiting_for_new_value)


@dp.message(EditProductStates.waiting_for_new_value)
async def process_new_value(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=await admin_menu())
        return

    data = await state.get_data()
    field = data['field']
    product_id = data['product_id']
    product_name = data['product_name']

    connection = connect_db()
    if not connection:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=await admin_menu())
        await state.clear()
        return

    cursor = connection.cursor()

    try:
        if field == "–Ω–∞–∑–≤–∞–Ω–∏–µ":
            cursor.execute("UPDATE products SET name = %s WHERE id = %s", (message.text, product_id))
            update_message = f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{message.text}'."

        elif field == "—Ü–µ–Ω–∞":
            try:
                price = float(message.text)
                if price <= 0:
                    raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")

                cursor.execute("UPDATE products SET price = %s WHERE id = %s", (price, product_id))
                update_message = f"–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {price} —Ä—É–±."
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ).")
                return

        elif field == "–∫–∞—Ç–µ–≥–æ—Ä–∏—è":
            if message.text not in Categories:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            cursor.execute("SELECT id FROM categories WHERE name = %s", (message.text,))
            category = cursor.fetchone()

            if not category:
                code_url = translit(message.text, 'ru', reversed=True).lower().replace(' ', '_')
                cursor.execute("INSERT INTO categories (name, code) VALUES (%s, %s)", (message.text, code_url))
                connection.commit()
                category_id = cursor.lastrowid
            else:
                category_id = category[0]

            cursor.execute("UPDATE products SET category_id = %s WHERE id = %s", (category_id, product_id))
            update_message = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{message.text}'."

        connection.commit()

        # Clear state before responding
        await state.clear()

        await message.answer(f"‚úÖ {update_message}", reply_markup=await admin_menu())
    except Exception as e:
        logger.error(f"Error updating product: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.", reply_markup=await admin_menu())
        await state.clear()
    finally:
        cursor.close()
        connection.close()


@dp.message(lambda message: message.text == "üó®Ô∏è –ó–∞—è–≤–∫–∏" and message.from_user.id == ADMIN_ID)
async def show_feedback_requests(message: types.Message):
    connection = connect_db()
    if not connection:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=await admin_menu())
        return

    cursor = connection.cursor()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        cursor.execute("""
            SELECT f.id, u.name, u.phone, u.id_telegram, f.message, f.created_at
            FROM feedback f
            JOIN users u ON f.user_id = u.id
            WHERE f.status = '–ù–æ–≤–æ–µ'
            ORDER BY f.created_at DESC
        """)

        feedback_requests = cursor.fetchall()

        if not feedback_requests:
            await message.answer("–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–µ—Ç.", reply_markup=await admin_menu())
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞—è–≤–æ–∫
        for request in feedback_requests:
            feedback_text = f"üì© <b>–ó–∞—è–≤–∫–∞ #{request[0]}</b>\n\n"
            feedback_text += f"üë§ –ò–º—è: {request[1] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            feedback_text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {request[2] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            feedback_text += f"üÜî Telegram ID: {request[3]}\n"
            feedback_text += f"üìÖ –î–∞—Ç–∞: {request[5].strftime('%d.%m.%Y %H:%M')}\n\n"
            feedback_text += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {request[4]}\n"

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É
            inline_markup = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(text="‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ",
                                                   callback_data=f"feedback_processed:{request[0]}"),
                        types.InlineKeyboardButton(text="üìû –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"feedback_reply:{request[3]}")
                    ]
                ]
            )

            await message.answer(feedback_text, parse_mode="HTML", reply_markup=inline_markup)
    except Exception as e:
        logger.error(f"Error showing feedback requests: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.", reply_markup=await admin_menu())
    finally:
        cursor.close()
        connection.close()


@dp.callback_query(lambda c: c.data.startswith("feedback_processed:"))
async def mark_feedback_processed(callback_query: types.CallbackQuery):
    feedback_id = int(callback_query.data.split(":")[1])

    connection = connect_db()
    if not connection:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    cursor = connection.cursor()

    try:
        cursor.execute("UPDATE feedback SET status = '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ' WHERE id = %s", (feedback_id,))
        connection.commit()
        await callback_query.answer("–ó–∞—è–≤–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è!")
        await callback_query.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logger.error(f"Error updating feedback status: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏.")
    finally:
        cursor.close()
        connection.close()


@dp.message(lambda message: message.text == "üß∫ –ó–∞–∫–∞–∑—ã" and message.from_user.id == ADMIN_ID)
async def show_orders(message: types.Message):
    connection = connect_db()
    if not connection:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=await admin_menu())
        return

    cursor = connection.cursor()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        cursor.execute("""
            SELECT o.id, u.name, u.phone, o.create_data, o.status, o.summa
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.status = '–ù–æ–≤—ã–π'
            ORDER BY o.create_data DESC
        """)

        orders = cursor.fetchall()

        if not orders:
            await message.answer("–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.", reply_markup=await admin_menu())
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
        for order in orders:
            order_text = f"üõí <b>–ó–∞–∫–∞–∑ #{order[0]}</b>\n\n"
            order_text += f"üë§ –ò–º—è: {order[1] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            order_text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order[2] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            order_text += f"üìÖ –î–∞—Ç–∞: {order[3].strftime('%d.%m.%Y %H:%M')}\n"
            order_text += f"üí∞ –°—É–º–º–∞: {order[5]} —Ä—É–±.\n"

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º
            inline_markup = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(text="‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω", callback_data=f"order_processed:{order[0]}"),
                        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"order_canceled:{order[0]}")
                    ],
                    [
                        types.InlineKeyboardButton(text="üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", callback_data=f"order_details:{order[0]}")
                    ]
                ]
            )

            await message.answer(order_text, parse_mode="HTML", reply_markup=inline_markup)
    except Exception as e:
        logger.error(f"Error showing orders: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.", reply_markup=await admin_menu())
    finally:
        cursor.close()
        connection.close()


@dp.callback_query(lambda c: c.data.startswith("order_details:"))
async def show_order_details(callback_query: types.CallbackQuery):
    order_id = int(callback_query.data.split(":")[1])

    connection = connect_db()
    if not connection:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    cursor = connection.cursor()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        cursor.execute("""
            SELECT o.id, u.name, u.phone, o.create_data, o.status, o.address, o.comment, o.summa, o.items_id
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.id = %s
        """, (order_id,))

        order = cursor.fetchone()

        if not order:
            await callback_query.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
        cursor.execute("""
            SELECT p.name, oi.quantity, oi.total
            FROM order_items oi
            JOIN products p ON oi.product_id = p.id
            WHERE oi.id = %s
        """, (order[8],))

        order_items = cursor.fetchall()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
        details_text = f"üõí <b>–ó–∞–∫–∞–∑ #{order[0]}</b>\n\n"
        details_text += f"üë§ –ò–º—è: {order[1] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        details_text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order[2] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        details_text += f"üìÖ –î–∞—Ç–∞: {order[3].strftime('%d.%m.%Y %H:%M')}\n"
        details_text += f"üè† –ê–¥—Ä–µ—Å: {order[5]}\n"

        if order[6]:
            details_text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order[6]}\n"

        details_text += f"\n<b>–¢–æ–≤–∞—Ä—ã:</b>\n"

        for item in order_items:
            details_text += f"‚Ä¢ {item[0]} x {item[1]} = {item[2]} —Ä—É–±.\n"

        details_text += f"\n<b>–ò—Ç–æ–≥–æ: {order[7]} —Ä—É–±.</b>"

        await callback_query.message.answer(details_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"Error getting order details: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.")
    finally:
        cursor.close()
        connection.close()


@dp.callback_query(lambda c: c.data.startswith("order_processed:"))
async def mark_order_processed(callback_query: types.CallbackQuery):
    order_id = int(callback_query.data.split(":")[1])

    connection = connect_db()
    if not connection:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    cursor = connection.cursor()

    try:
        cursor.execute("UPDATE orders SET status = '–û–±—Ä–∞–±–æ—Ç–∞–Ω' WHERE id = %s", (order_id,))
        connection.commit()
        await callback_query.answer("–ó–∞–∫–∞–∑ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π!")
        await callback_query.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logger.error(f"Error updating order status: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.")
    finally:
        cursor.close()
        connection.close()


@dp.callback_query(lambda c: c.data.startswith("order_canceled:"))
async def mark_order_canceled(callback_query: types.CallbackQuery):
    order_id = int(callback_query.data.split(":")[1])

    connection = connect_db()
    if not connection:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    cursor = connection.cursor()

    try:
        cursor.execute("UPDATE orders SET status = '–û—Ç–º–µ–Ω–µ–Ω' WHERE id = %s", (order_id,))
        connection.commit()
        await callback_query.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω!")
        await callback_query.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logger.error(f"Error updating order status: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.")
    finally:
        cursor.close()
        connection.close()


@dp.message(lambda message: message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    # Clear any active state
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        logger.info(f"Cleared state {current_state} for user {message.from_user.id}")

    if is_admin(message.from_user.id):
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=await admin_menu())
    else:
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=await main_menu())


@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def back_button(message: types.Message, state: FSMContext):
    # Clear any active state
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        logger.info(f"Cleared state {current_state} for user {message.from_user.id}")

    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=await main_menu())


@dp.message(Command('catalog'))
async def catalog_command(message: types.Message):
    await catalogs(message)


@dp.message(Command(commands=['start', 'help']))
async def send_welcome(message: types.Message, state: FSMContext):
    # Clear any active state
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        logger.info(f"Cleared state {current_state} for user {message.from_user.id}")

    if is_admin(message.from_user.id):
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
                             reply_markup=await admin_menu())
    else:
        await register_user(message.from_user.id, message.from_user.first_name)
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}, –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω \r\n –°–æ–¥–æ–º–õ–µ—Å –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç!\r\n –í–≤–µ–¥–∏—Ç–µ /catalog –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤."
            , reply_markup=await main_menu())


@dp.message(lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    help_text = """
        <b>üìö –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
        <b>üëâ –ö–∞—Ç–∞–ª–æ–≥</b> - —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤
        <b>üó®Ô∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b> - –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, —á—Ç–æ –∏—Å–∫–∞–ª–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –æ–Ω —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è
        <b>üß∫ –ö–æ—Ä–∑–∏–Ω–∞</b> - –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã.
        <b>‚ÑπÔ∏è –ü–æ–º–æ—â—å</b> - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.
    """
    await message.answer(help_text, parse_mode='HTML')


@dp.message()
async def unknown_message(message: types.Message, state: FSMContext):
    print(message.text)
    # Check if user is in any state
    current_state = await state.get_state()
    if current_state is not None:
        logger.info(f"User {message.from_user.id} sent message '{message.text}' while in state {current_state}")
        # Let the state handlers handle the message
        return

    await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
class AdminReplyState(StatesGroup):
    waiting_for_message = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å"
@dp.callback_query(lambda c: c.data.startswith("feedback_reply:"))
async def reply_to_feedback(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
        user_telegram_id = int(callback_query.data.split(":")[1])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(reply_to_user_id=user_telegram_id)
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback_query.answer()
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        await callback_query.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:",
            reply_markup=await cancel_button()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
        await state.set_state(AdminReplyState.waiting_for_message)
        
    except Exception as e:
        logger.error(f"Error starting reply to feedback: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
@dp.message(AdminReplyState.waiting_for_message)
async def process_admin_reply(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=await admin_menu())
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    user_telegram_id = data.get("reply_to_user_id")
    
    if not user_telegram_id:
        await message.answer("–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=await admin_menu())
        await state.clear()
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            user_telegram_id,
            f"<b>–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{message.text}",
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await message.answer(
            f"‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
            reply_markup=await admin_menu()
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error sending reply to user: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {str(e)}",
            reply_markup=await admin_menu()
        )
        await state.clear()
        
        
async def main():
    conn()
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
